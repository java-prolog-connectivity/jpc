package org.jpc.util;

import java.io.File;
import java.util.Map;
import java.util.Properties;

public class JpcPreferences {

	//General JPC properties
	public static final String JPC_NAME = "The Java-Prolog Connectivity Library";
	public static final String JPC_SHORT_NAME = "JPC";
	
	//Configuration file
	public static final String CONFIGURATION_FILE = JPC_SHORT_NAME.toLowerCase() + ".settings";
	
	//Prolog resources properties
	public static final String JPC_BASE_PACKAGE = "org.jpc";
	public static final String JPC_PROLOG_PACKAGE = JPC_BASE_PACKAGE + ".pl"; //base package for Prolog files required by JPC
	public static final String JPC_PROLOG_RESOURCES = JPC_PROLOG_PACKAGE.replaceAll("\\.", "/") + "/";
	public static final String JPC_LOADER_FILE = JPC_PROLOG_RESOURCES + "jpc_prolog.pl";
	public static final String JPC_LOGTALK_LOADER_FILE = JPC_PROLOG_RESOURCES + "load_all.lgt";
	
	//Macros symbols
	public static final String SUBSTITUTION_OPERATOR = "?";
	public static final String CONVERSION_SPECIFIER_OPERATOR = "/";
	public static final String TERM_CONVERSION_BY_MAPPING_SYMBOL = "m";
	public static final String TERM_CONVERSION_BY_REFERENCE_SYMBOL = "r";
	public static final String TERM_CONVERSION_BY_MAPPING_AND_REFERENCE_SYMBOL = TERM_CONVERSION_BY_MAPPING_SYMBOL + TERM_CONVERSION_BY_REFERENCE_SYMBOL;
	public static final String TERM_CONVERSION_BY_SERIALIZATION_SYMBOL = "s";
	public static final String DEFAULT_TERM_CONVERSION_SYMBOL = TERM_CONVERSION_BY_MAPPING_SYMBOL;
	
	
	public static final String HOME_ENV_VAR = "HOME";
	
	//Prefix for all the variables exclusive to JPC (used by the library in certain cases, not directly written by the user). Variables starting with this prefix are generated by the framework. These variables are not dropped from the query result.
	public static final String JPC_VAR_PREFIX = "JPC_VAR_";
	//Similar to JPC_VAR_PREFIX. However, Variables starting with this prefix should not be visible in the result.
	public static final String JPC_ANON_VAR_PREFIX = "_"+JPC_VAR_PREFIX;


	private final Properties properties;

	public JpcPreferences() {
		this(new Properties());
	}
	
	public JpcPreferences(Properties properties) {
		this.properties = properties;
	}
	
	private File getHomeDirectory() {
		String homeDirVar = this.getVarOrThrow(HOME_ENV_VAR);
		return new File(homeDirVar);
	}
	
	protected String getJpcTmpSubdirectoryName() {
		return "."+JPC_SHORT_NAME.toLowerCase();
	}

	public File getJpcTmpDirectory() {
		File homeDir = getHomeDirectory();
		return new File(homeDir, getJpcTmpSubdirectoryName());
	}


	public String getLocalVar(String key) {
		return properties.getProperty(key);
	}

	public String setLocalVar(String key, String value) {
		return (String) properties.setProperty(key, value);
	}

	public static String getEnvironmentVar(String name) {
		Map<String, String> env = System.getenv();
		return env.get(name);
	}

	public static String getEnvironmentVarOrThrow(String name) {
		String value = getEnvironmentVar(name);
		if(value == null)
			throw new RuntimeException("No environment variable with name " + name + " exists.");
		return value;
	}

	public static String getPropertyVar(String name) {
		java.util.Properties p = System.getProperties();
		return p.getProperty(name);
	}


	/**
	 * Will answer a property from the in-memory hash.
	 * If it is not found it will try to find it from the system properties or as an environment variable
	 * @param key the name of the property
	 * @return a property with the given name
	 */
	public String getVar(String key) {
		String value = null;
		value = getLocalVar(key); //finds a value in the local map
		if(value == null) {
			value = getPropertyVar(key); //try to find a value in the system properties (e.g., passing an argument to the JVM with "-DENV_VARIABLE_NAME=ENV_VARIABLE_VALUE")
			if(value == null) {
				value = getEnvironmentVar(key); //try to find an environment variable with this name
			}
		}
		return value;
	}

	public String getVarOrThrow(String key) {
		String preference = getVar(key);
		if(preference==null)
			throw new MissingPropertyException(key);
		return preference;
	}


	public static class MissingPropertyException extends RuntimeException {
		private String varName;
		public MissingPropertyException(String varName) {
			this.varName = varName;
		}

		@Override
		public String getMessage() {
			return "The environment variable "+varName+" has not been set";
		}
	}

}

