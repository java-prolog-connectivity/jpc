package org.jpc.util;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import java.io.File;
import java.util.Properties;

import org.minitoolbox.commons.Preferences;

public class JpcPreferences extends Preferences {

	//General JPC properties
	public static final String JPC_NAME = "The Java-Prolog Connectivity Library";
	public static final String JPC_SHORT_NAME = "JPC";
	
	//Configuration file
	public static final String CONFIGURATION_FILE = JPC_SHORT_NAME.toLowerCase() + ".settings";
	
	//Prolog resources properties
	public static final String JPC_BASE_PACKAGE = "org.jpc";
	public static final String JPC_PROLOG_PACKAGE = JPC_BASE_PACKAGE + ".pl"; //base package for Prolog files required by JPC
	private static final String JPC_PROLOG_RESOURCES = JPC_PROLOG_PACKAGE.replaceAll("\\.", "/") + "/";
	public static final String JPC_LOADER_FILE = JPC_PROLOG_RESOURCES + "jpc.pl";
	
	//Macros symbols
	public static final String SUBSTITUTION_OPERATOR = "?";
	public static final String CONVERSION_SPECIFIER_OPERATOR = "/";
	public static final String TERM_CONVERSION_BY_MAPPING_SYMBOL = "m";
	public static final String TERM_CONVERSION_BY_REFERENCE_SYMBOL = "r";
	public static final String TERM_CONVERSION_BY_MAPPING_AND_REFERENCE_SYMBOL = TERM_CONVERSION_BY_MAPPING_SYMBOL + TERM_CONVERSION_BY_REFERENCE_SYMBOL;
	public static final String TERM_CONVERSION_BY_SERIALIZATION_SYMBOL = "s";
	public static final String DEFAULT_TERM_CONVERSION_SYMBOL = TERM_CONVERSION_BY_MAPPING_SYMBOL;
	
	//Logtalk related properties
	public final static String LOGTALK_HOME_ENV_VAR = "LOGTALKHOME";  //needed by the framework to find the integration scripts with Logtalk
	public final static String LOGTALK_USER_ENV_VAR = "LOGTALKUSER"; //logtalk user directory environment variable (used as a tmp directory if available)
	public final static String HOME_ENV_VAR = "HOME";
	
	//Prefix for all the variables exclusive to JPC (used by the library in certain cases, not directly written by the user). Variables starting with this prefix are generated by the framework. These variables are not dropped from the query result.
	public static final String JPC_VAR_PREFIX = "JPC_VAR_";
	//Similar to JPC_VAR_PREFIX. However, Variables starting with this prefix should not be visible in the result.
	public static final String JPC_ANON_VAR_PREFIX = "_"+JPC_VAR_PREFIX;
	


	
	
	public JpcPreferences() {
	}
	
	public JpcPreferences(Properties properties) {
		super(properties);
	}
	
	/**
	 * Answers a Logtalk integration script for a given Prolog engine id.
	 * This method should always return the valid path of an integration script.
	 * If it is not possible to find the integration script for a given engine, the method should thrown an exception detailing the reason of the failure.
	 * @param engineName the target engine id
	 * @return a full path of a Logtalk integration script for the given Prolog engine id.
	 */
	public String logtalkIntegrationScriptOrThrow(String engineName) {
		checkNotNull(engineName);
		checkArgument(!engineName.isEmpty());
		engineName = engineName.toLowerCase();
		File logtalkHomeFile = getLogtalkHomeOrThrow();
		String logtalkHome = logtalkHomeFile.getAbsolutePath();
		String scriptPath = logtalkHome + "/integration/";
		File scriptFolderFile = new File(scriptPath);
		if(!scriptFolderFile.exists())
			throw new RuntimeException("The " + LOGTALK_HOME_ENV_VAR + " environment variable does not seem to be pointing to a valid Logtalk installation. Please check that variable before attempting to load Logtalk.");
		String fileName = "logtalk_" + engineName + ".pl";
		scriptPath += fileName;
		File integrationScriptfile = new File(scriptPath);
		if(!integrationScriptfile.exists())
			throw new RuntimeException("The Logtalk installation at " + logtalkHome + " does not support the Prolog engine " + engineName);
		return scriptPath;
	}
	
	public String logtalkLibraryDirOrThrow() {
		File logtalkHomeFile = getLogtalkHomeOrThrow();
		return logtalkHomeFile.getAbsolutePath() + "/library/";
	}
	
	public File getLogtalkHomeOrThrow() {
		String logtalkHome = getVarOrThrow(LOGTALK_HOME_ENV_VAR);
		File logtalkHomeFile = new File(logtalkHome);
		if(!logtalkHomeFile.exists())
			throw new RuntimeException("Logtalk is not installed at " + logtalkHome + ". Please configure the " + LOGTALK_HOME_ENV_VAR + " environment variable or install Logtalk.");
		return logtalkHomeFile;
	}
	
	private File getHomeDirectory() {
		String homeDirVar = this.getVarOrThrow(HOME_ENV_VAR);
		return new File(homeDirVar);
	}
	
	protected String getJpcTmpSubdirectoryName() {
		return "."+JPC_SHORT_NAME.toLowerCase();
	}

	public File getJpcTmpDirectory() {
		File homeDir = getHomeDirectory();
		return new File(homeDir, getJpcTmpSubdirectoryName());
	}

}

